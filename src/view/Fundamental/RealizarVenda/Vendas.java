/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.Fundamental.RealizarVenda;

import controle.ControleItemVenda;
import controle.ControleProduto;
import controle.ControleRecebimento;
import controle.ControleVenda;
import java.awt.Color;

import java.awt.Font;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Locale;

import javax.swing.BorderFactory;
import javax.swing.DefaultComboBoxModel;

import javax.swing.JOptionPane;

import javax.swing.SwingConstants;
import javax.swing.border.Border;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableCellRenderer;

import javax.swing.table.DefaultTableModel;
import modelo.Cliente;
import modelo.ItemVenda;

import modelo.Produto;
import modelo.Recebimento;
import modelo.Venda;

import view.buscar.BuscarCliente;
import view.buscar.BuscarProduto;

/**
 *
 * @author Maycon
 */
public class Vendas extends javax.swing.JDialog {

    /**
     * Creates new form Vendas
     */
    Produto prod = null;

    private ArrayList<ItemVenda> lisProduto = new ArrayList<>();
    ArrayList<ItemVenda> listProdutoConfere = new ArrayList<>();

    private ArrayList<Venda> listVenda = new ArrayList<>();

    private DefaultTableModel itemVenda;

    SimpleDateFormat formatarData = new SimpleDateFormat("dd/MM/yyyy");
    SimpleDateFormat formatarHora = new SimpleDateFormat("HH:mm:ss");

    Cliente clienteBusca = new Cliente();
    Venda vendaMarcada;
    DefaultTableCellRenderer direita = new DefaultTableCellRenderer();
    DefaultTableCellRenderer esquerda = new DefaultTableCellRenderer();

    int i = 1;

    Venda venda;

    Date dataVenda;

    public Vendas(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        itemVenda = (DefaultTableModel) tabProdutoVenda.getModel();

        jSpinQuantProduto.requestFocus();

        txtCodigoProduto.setBorder(BorderFactory.createMatteBorder(0, 0, 2, 0, Color.BLACK));
        direita.setHorizontalAlignment(SwingConstants.RIGHT);
        esquerda.setHorizontalAlignment(SwingConstants.LEFT);
        tabProdutoVenda.setFont(new Font("SansSerif", 1, 14));

        direita.setBackground(new java.awt.Color(209, 209, 209));
        direita.setForeground(new java.awt.Color(102, 102, 102));
        esquerda.setBackground(new java.awt.Color(209, 209, 209));
        esquerda.setForeground(new java.awt.Color(102, 102, 102));
        Border emptyBorder = null;

        direita.setBorder(emptyBorder);
        tabProdutoVenda.getColumnModel().getColumn(1).setCellRenderer(direita);
        tabProdutoVenda.getColumnModel().getColumn(2).setCellRenderer(direita);
        tabProdutoVenda.getColumnModel().getColumn(3).setCellRenderer(direita);
        tabProdutoVenda.getColumnModel().getColumn(0).setCellRenderer(esquerda);
        // tabProdutoVenda.getColumnModel().getColumn(1).setCellEditor(new  setColorFilasBackgound1(new java.awt.Color(209, 209, 209)));
        dataVenda = new Date();
        carregarbox();
    }

    void carregarbox() {

        ControleVenda contVenda = new ControleVenda();
        if (!contVenda.listaVendaAberta().isEmpty()) {
            boxContaAberta.addItem(new Venda());

            for (Venda v : contVenda.listaVendaAberta()) {
                boxContaAberta.addItem((v));
            }
        } else {
            boxContaAberta.addItem(new Venda());
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        rSPanelGradiente1 = new rspanelgradiente.RSPanelGradiente();
        jLabel1 = new javax.swing.JLabel();
        botFecharNormal = new javax.swing.JButton();
        rSPanelGradiente2 = new rspanelgradiente.RSPanelGradiente();
        botVoltar = new javax.swing.JButton();
        botReceber = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        painelItemCompra = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        botBuscarProduto = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jSpinQuantProduto = new com.toedter.components.JSpinField();
        botAdicionar = new javax.swing.JButton();
        botExcluir = new javax.swing.JButton();
        labNomeProduto = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabProdutoVenda = new rojerusan.RSTableMetro();
        jLabel15 = new javax.swing.JLabel();
        labValorProduto = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        labQuantEstoque = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtCodigoProduto = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        boxContaAberta = new javax.swing.JComboBox<>();
        horaAbertura = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        dataAbertura = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        botBuscarCliente = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        labValorTotalVenda = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        labNomeCliente = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        labNRFiscal = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("VENDA");

        botFecharNormal.setBackground(new java.awt.Color(255, 0, 0));
        botFecharNormal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagem/icons/fechar34px.png"))); // NOI18N
        botFecharNormal.setContentAreaFilled(false);
        botFecharNormal.setFocusable(false);
        botFecharNormal.setOpaque(true);
        botFecharNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botFecharNormalActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout rSPanelGradiente1Layout = new javax.swing.GroupLayout(rSPanelGradiente1);
        rSPanelGradiente1.setLayout(rSPanelGradiente1Layout);
        rSPanelGradiente1Layout.setHorizontalGroup(
            rSPanelGradiente1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rSPanelGradiente1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(botFecharNormal, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        rSPanelGradiente1Layout.setVerticalGroup(
            rSPanelGradiente1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rSPanelGradiente1Layout.createSequentialGroup()
                .addComponent(botFecharNormal, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(rSPanelGradiente1Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );

        rSPanelGradiente2.setLayout(new java.awt.GridLayout(1, 0));

        botVoltar.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        botVoltar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagem/icons/voltar18px.png"))); // NOI18N
        botVoltar.setText("VOLTAR");
        botVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botVoltarActionPerformed(evt);
            }
        });
        rSPanelGradiente2.add(botVoltar);

        botReceber.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        botReceber.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagem/icons/receber18px.png"))); // NOI18N
        botReceber.setText("RECEBER VENDA");
        botReceber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botReceberActionPerformed(evt);
            }
        });
        rSPanelGradiente2.add(botReceber);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0)), javax.swing.BorderFactory.createTitledBorder(null, "PRODUTOS", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("SansSerif", 0, 14)))); // NOI18N

        painelItemCompra.setBackground(new java.awt.Color(255, 255, 255));
        painelItemCompra.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0), "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("SansSerif", 1, 12))); // NOI18N

        jLabel12.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel12.setText("PRODUTO:");

        botBuscarProduto.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        botBuscarProduto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagem/icons/buscar18px.png"))); // NOI18N
        botBuscarProduto.setText("Buscar Produto");
        botBuscarProduto.setFocusable(false);
        botBuscarProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botBuscarProdutoActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel13.setText("QUANTIDADE:");

        jSpinQuantProduto.setValue(1);

        botAdicionar.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        botAdicionar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagem/icons/maisAzul18px.png"))); // NOI18N
        botAdicionar.setText("ADICIONAR");
        botAdicionar.setFocusable(false);
        botAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botAdicionarActionPerformed(evt);
            }
        });

        botExcluir.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        botExcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagem/icons/delete18px.png"))); // NOI18N
        botExcluir.setText("EXCLUIR");
        botExcluir.setFocusable(false);
        botExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botExcluirActionPerformed(evt);
            }
        });

        labNomeProduto.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        jScrollPane3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        tabProdutoVenda.setAutoCreateRowSorter(true);
        tabProdutoVenda.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Produto", "Valor", "Quantidade", "Subtotal"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabProdutoVenda.setAltoHead(40);
        tabProdutoVenda.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        tabProdutoVenda.setAutoscrolls(false);
        tabProdutoVenda.setColorBackgoundHead(new java.awt.Color(250, 250, 250));
        tabProdutoVenda.setColorFilasBackgound1(new java.awt.Color(209, 209, 209));
        tabProdutoVenda.setColorFilasBackgound2(new java.awt.Color(209, 209, 209));
        tabProdutoVenda.setColorFilasForeground1(new java.awt.Color(102, 102, 102));
        tabProdutoVenda.setColorFilasForeground2(new java.awt.Color(102, 102, 102));
        tabProdutoVenda.setColorForegroundHead(new java.awt.Color(51, 51, 51));
        tabProdutoVenda.setColorSelBackgound(new java.awt.Color(40, 53, 147));
        tabProdutoVenda.setFuenteFilas(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        tabProdutoVenda.setFuenteFilasSelect(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        tabProdutoVenda.setFuenteHead(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        tabProdutoVenda.setGridColor(new java.awt.Color(204, 204, 204));
        tabProdutoVenda.setGrosorBordeFilas(0);
        tabProdutoVenda.setGrosorBordeHead(0);
        tabProdutoVenda.setIntercellSpacing(new java.awt.Dimension(0, 0));
        tabProdutoVenda.setMultipleSeleccion(false);
        tabProdutoVenda.setOpaque(false);
        tabProdutoVenda.setRowHeight(30);
        tabProdutoVenda.setSelectionBackground(new java.awt.Color(40, 53, 147));
        tabProdutoVenda.getTableHeader().setReorderingAllowed(false);
        tabProdutoVenda.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabProdutoVendaMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tabProdutoVenda);
        if (tabProdutoVenda.getColumnModel().getColumnCount() > 0) {
            tabProdutoVenda.getColumnModel().getColumn(0).setResizable(false);
            tabProdutoVenda.getColumnModel().getColumn(1).setResizable(false);
            tabProdutoVenda.getColumnModel().getColumn(2).setResizable(false);
            tabProdutoVenda.getColumnModel().getColumn(3).setResizable(false);
        }

        jLabel15.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel15.setText("VALOR PRODUTO:");

        labValorProduto.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        labValorProduto.setForeground(new java.awt.Color(255, 0, 0));

        jLabel14.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel14.setText("QUANTIDADE EM ESTOQUE:");

        labQuantEstoque.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N

        jLabel2.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel2.setText("CODIGO PRODUTO:");

        txtCodigoProduto.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        txtCodigoProduto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodigoProdutoFocusLost(evt);
            }
        });
        txtCodigoProduto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtCodigoProdutoMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                txtCodigoProdutoMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                txtCodigoProdutoMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtCodigoProdutoMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                txtCodigoProdutoMouseReleased(evt);
            }
        });
        txtCodigoProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodigoProdutoActionPerformed(evt);
            }
        });
        txtCodigoProduto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCodigoProdutoKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCodigoProdutoKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCodigoProdutoKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout painelItemCompraLayout = new javax.swing.GroupLayout(painelItemCompra);
        painelItemCompra.setLayout(painelItemCompraLayout);
        painelItemCompraLayout.setHorizontalGroup(
            painelItemCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelItemCompraLayout.createSequentialGroup()
                .addGroup(painelItemCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15)
                    .addComponent(jLabel12)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(painelItemCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labNomeProduto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtCodigoProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelItemCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelItemCompraLayout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(botBuscarProduto))
                    .addGroup(painelItemCompraLayout.createSequentialGroup()
                        .addComponent(botAdicionar)
                        .addGap(1, 1, 1)
                        .addComponent(botExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 1103, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(painelItemCompraLayout.createSequentialGroup()
                .addGap(121, 121, 121)
                .addComponent(labValorProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(61, 61, 61)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSpinQuantProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel14)
                .addGap(18, 18, 18)
                .addComponent(labQuantEstoque, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        painelItemCompraLayout.setVerticalGroup(
            painelItemCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelItemCompraLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(painelItemCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtCodigoProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(painelItemCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelItemCompraLayout.createSequentialGroup()
                        .addGroup(painelItemCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel12)
                            .addComponent(labNomeProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(painelItemCompraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(labValorProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15)
                            .addComponent(jLabel13)
                            .addComponent(jSpinQuantProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14)
                            .addComponent(labQuantEstoque, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(botAdicionar)
                            .addComponent(botExcluir))
                        .addGap(6, 6, 6)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.CENTER, painelItemCompraLayout.createSequentialGroup()
                        .addComponent(botBuscarProduto)
                        .addGap(234, 234, 234))))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(painelItemCompra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(painelItemCompra, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), javax.swing.BorderFactory.createTitledBorder(null, "Vendas", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("SansSerif", 1, 12)))); // NOI18N

        jLabel8.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel8.setText("CONTAS ABERTAS:");

        boxContaAberta.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        boxContaAberta.setBorder(null);
        boxContaAberta.setFocusable(false);
        boxContaAberta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                boxContaAbertaMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                boxContaAbertaMouseExited(evt);
            }
        });
        boxContaAberta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxContaAbertaActionPerformed(evt);
            }
        });
        boxContaAberta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                boxContaAbertaKeyPressed(evt);
            }
        });

        horaAbertura.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        horaAbertura.setForeground(new java.awt.Color(0, 0, 204));

        jLabel10.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel10.setText("HORA ABERTURA:");

        dataAbertura.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        dataAbertura.setForeground(new java.awt.Color(0, 0, 204));

        jLabel11.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel11.setText("DATA ABERTURA:");

        botBuscarCliente.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        botBuscarCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagem/icons/novaConta18px.png"))); // NOI18N
        botBuscarCliente.setText("NOVA CONTA        ");
        botBuscarCliente.setFocusable(false);
        botBuscarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botBuscarClienteActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED)));

        jLabel9.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel9.setText("VALOR VENDA");

        labValorTotalVenda.setFont(new java.awt.Font("SansSerif", 1, 60)); // NOI18N
        labValorTotalVenda.setForeground(new java.awt.Color(255, 0, 0));
        labValorTotalVenda.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(labValorTotalVenda, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labValorTotalVenda, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jLabel16.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel16.setText("NOME CLIENTE:");

        labNomeCliente.setFont(new java.awt.Font("SansSerif", 1, 20)); // NOI18N
        labNomeCliente.setForeground(new java.awt.Color(0, 0, 204));

        jLabel17.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel17.setText("NR. FISCAL:");

        labNRFiscal.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel11)
                            .addComponent(jLabel16))
                        .addGap(0, 0, 0)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(boxContaAberta, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labNomeCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addGap(48, 48, 48)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(dataAbertura, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(horaAbertura, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(labNRFiscal, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botBuscarCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(botBuscarCliente)
                    .addComponent(boxContaAberta, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(6, 6, 6)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(labNomeCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addGap(7, 7, 7)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel11)
                    .addComponent(dataAbertura, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(horaAbertura, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(labNRFiscal, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10))
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(rSPanelGradiente1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(rSPanelGradiente2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(rSPanelGradiente1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(rSPanelGradiente2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void botFecharNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botFecharNormalActionPerformed

        dispose();

        // TODO add your handling code here:
    }//GEN-LAST:event_botFecharNormalActionPerformed

    private void botBuscarProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botBuscarProdutoActionPerformed
        BuscarProduto busProd = new BuscarProduto(null, true, false);
        busProd.setVisible(true);
        if (busProd.getTipoSelecionado() == null) {

        } else {
            prod = busProd.getTipoSelecionado();
        }
        if (prod != null) {
            if (busProd.getTipoSelecionado() != null) {
                labNomeProduto.setText(prod.getProdutoNome());
                labQuantEstoque.setText(String.valueOf(prod.getProdutoQuantidade()));
                labValorProduto.setText(doubleString(prod.getProdutoValorVenda()));
            }
        } else {

        }
    }//GEN-LAST:event_botBuscarProdutoActionPerformed

    private void botAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botAdicionarActionPerformed
        if (boxContaAberta.getSelectedIndex() != 0) {
            if (prod != null) {
                ItemVenda iv = new ItemVenda();
                iv.setNrItem(vendaMarcada.getListaVenda().size() + i);
                if (prod.getProdutoQuantidade() >= jSpinQuantProduto.getValue()) {
                    if (jSpinQuantProduto.getValue() != 0) {
                        iv.setProdutoCod(prod);
                        iv.setQuantidade(jSpinQuantProduto.getValue());
                        iv.setVendaCod(vendaMarcada);
                        iv.setValor(prod.getProdutoValorVenda());
                        lisProduto.add(iv);
                        labValorTotalVenda.setText(doubleString(VerificaValor()));
                        vendaMarcada.setVendaTotal((VerificaValor()));
                        vendaMarcada.setListaVenda(lisProduto);

                        ControleVenda contVenda = new ControleVenda();
                        contVenda.salvarAlteracao(vendaMarcada);
                        atualizaTabela(lisProduto);
                        prod = null;
                    } else {
                        JOptionPane.showMessageDialog(null, "QUANTIDADE DE PRODUTOS TEM QUE SER MAIOR QUE ZERO!");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "QUANTIDADE MAIOR DO QUE O DO ESTOQUE!");
                }

            } else {
                JOptionPane.showMessageDialog(null, "SELECIONE UM PRODUTO PARA\n         ADICIONAR NA LISTA!");
            }
        } else {

            if (prod != null) {

                ItemVenda iv = new ItemVenda();
                if (contarQuantProdutoNaLista(lisProduto) < prod.getProdutoQuantidade()) {
                    if (lisProduto.isEmpty()) {
//                        
                        iv.setNrItem(i);
                    } else {

                        iv.setNrItem(venda.getListaVenda().size() + i);
                    }
                }
                try {
                    if (labNRFiscal.getText().equals("")) {
                        venda.setNrNota((1));
                    } else {
                        venda.setNrNota(venda.getNrNota());
                    }

                    iv.setProdutoCod(prod);
                    if (jSpinQuantProduto.getValue() > 0) {
                        iv.setQuantidade(jSpinQuantProduto.getValue());

                        iv.setVendaCod(vendaMarcada);
                        iv.setValor(prod.getProdutoValorVenda());
                        lisProduto.add(iv);
                        labValorTotalVenda.setText(doubleString(VerificaValor()));
                        venda.setVendaTotal((VerificaValor()));

                        atualizaTabela(lisProduto);
                        venda.setListaVenda(lisProduto);
                        prod = null;
                    } else {
                        JOptionPane.showMessageDialog(null, "QUANTIDADE DE ITEM INVALIDA!!");
                    }
                } catch (NullPointerException e) {
                    JOptionPane.showMessageDialog(null, "DIGITE NUMERO NO VALOR DA NOTA!");
                }
            } else {
                JOptionPane.showMessageDialog(null, "SELECIONE UM PRODUTO PARA\n         ADICIONAR NA LISTA!");
            }

        }

        txtCodigoProduto.setText("");
        labNomeProduto.setText("");
        jSpinQuantProduto.setValue(1);
        labQuantEstoque.setText("");
        labValorProduto.setText("");
        atualizaTabela(lisProduto);
    }//GEN-LAST:event_botAdicionarActionPerformed

    private void tabProdutoVendaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabProdutoVendaMouseClicked


    }//GEN-LAST:event_tabProdutoVendaMouseClicked

    private void botExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botExcluirActionPerformed
        int linha = -1;
        linha = tabProdutoVenda.getSelectedRow();

        if (linha != -1) {
            ItemVenda iv = new ItemVenda();
            iv = lisProduto.get(linha);
            lisProduto.remove(iv);
            Produto p = new Produto();
            if (boxContaAberta.getSelectedIndex() != 0) {
                if (lisProduto.isEmpty()) {
                    p = iv.getProdutoCod();
                    p.setProdutoQuantidade(iv.getQuantidade());
                    p.setProdutoId(iv.getProdutoCod().getProdutoId());
                    vendaMarcada.setListaVenda(lisProduto);
                    vendaMarcada.setVendaTotal(VerificaValor());
                    ControleProduto contP = new ControleProduto();
                    contP.devolverProduto(p, vendaMarcada);
                    boxContaAberta.setModel(new DefaultComboBoxModel<Venda>());
                    carregarbox();
                } else {
                    vendaMarcada.setVendaTotal(VerificaValor());
                    vendaMarcada.setListaVenda(lisProduto);
                    ControleVenda contVenda = new ControleVenda();
                    contVenda.devolver(vendaMarcada);

                }

                atualizaTabela(lisProduto);

                if (boxContaAberta.getSelectedIndex() != 0) {
                    ControleRecebimento contRec = new ControleRecebimento();
                    double x = 0.0;
                    x = contRec.buscaConta(vendaMarcada.getVendaCod());
                    if (x != 0.0) {
                        double valor = VerificaValor();
                        labValorTotalVenda.setText(doubleString(VerificaValor() - x));
                    } else {
                        labValorTotalVenda.setText(doubleString(VerificaValor()));
                    }
                } else {

                }
            }else{
                venda.setListaVenda(lisProduto);
                atualizaTabela(lisProduto);
                labValorTotalVenda.setText(doubleString(venda.getTotalVenda()));
            }
        } else {
            JOptionPane.showMessageDialog(null, "SELECIONE UM ITEM PARA SER EXCLUIDO");
        }


    }//GEN-LAST:event_botExcluirActionPerformed

    private void botReceberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botReceberActionPerformed

        if (boxContaAberta.getSelectedIndex() == 0) {
            //  ControleVenda contVenda = new ControleVenda();
            if (!(null == venda.getListaVenda())) {
                venda.setStatus('F');
                venda.setVendaData(dataVenda);
                venda.setVendaHora(dataVenda);
                venda.setListaVenda(lisProduto);
                venda.setVendaTotal(venda.getVendaTotal());
                Receber rec = new Receber(null, true, venda);
                rec.setVisible(true);
                if (venda.getListaRecebimento() == null) {
                } else {
                    if (venda.getTotalRecebido() >= venda.getVendaTotal()) {
                        ControleVenda contVenda = new ControleVenda();
                        //   contVenda.gravarNovo(venda);
                        boxContaAberta.setSelectedIndex(0);
                    } else {
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "ADICIONE PRODUTOS NA LISTA!");
            }

        } else {
            if (!(vendaMarcada.getListaVenda().isEmpty())) {
                Receber rec = new Receber(null, true, vendaMarcada);
                rec.setVisible(true);

                prod = null;
                int x = boxContaAberta.getSelectedIndex();
                if (vendaMarcada.getTotalRecebido() >= vendaMarcada.getTotalVenda()) {
                    boxContaAberta.setModel(new DefaultComboBoxModel<Venda>());
                    carregarbox();
                    vendaMarcada = null;
                } else {
                    boxContaAberta.setModel(new DefaultComboBoxModel<Venda>());
                    carregarbox();
//                    boxContaAberta.setSelectedIndex(x);
                }
            } else {
                JOptionPane.showMessageDialog(null, "ADICIONE PRODUTOS A LISTA!");
            }
        }

    }//GEN-LAST:event_botReceberActionPerformed

    private void botVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botVoltarActionPerformed
        dispose();
    }//GEN-LAST:event_botVoltarActionPerformed

    private void botBuscarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botBuscarClienteActionPerformed

        //   SALVAR NOVA VENDA PARA CLIENTE AQUI.
        BuscarCliente busCli = new BuscarCliente(null, true, true);
        busCli.setVisible(true);

        clienteBusca = busCli.getTipoSelecionado();

        if (clienteBusca != null) {
            ControleVenda contVenda = new ControleVenda();
            Date hoje;
            hoje = new Date();
            Venda venda = new Venda();
            venda.setClienteCod(clienteBusca);
            venda.setStatus('A');
            venda.setVendaData(hoje);
            venda.setVendaHora(hoje);
            venda.setNrNota(ControleVenda.isNrNota());
            contVenda.gravarNovo(venda);
            boxContaAberta.setModel(new DefaultComboBoxModel<Venda>());
            carregarbox();
            ControleVenda.setNrNota(ControleVenda.isNrNota() + 1);

        } else {

        }
        boxContaAberta.setEnabled(true);
        boxContaAberta.setSelectedIndex(0);
        horaAbertura.setText("");
        dataAbertura.setText("");

    }//GEN-LAST:event_botBuscarClienteActionPerformed

    private void boxContaAbertaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxContaAbertaActionPerformed

        lisProduto.clear();
        atualizaTabela(lisProduto);

        if (boxContaAberta.getSelectedIndex() != 0) {

            vendaMarcada = new Venda();
            vendaMarcada = (Venda) boxContaAberta.getSelectedItem();

            for (Recebimento r : vendaMarcada.getListaRecebimento()) {

            }
            if (lisProduto.isEmpty()) {
                if (vendaMarcada.getListaVenda().isEmpty()) {
                    labNomeCliente.setText(vendaMarcada.getClienteCod().getClienteNome());
                    dataAbertura.setText(formatarData.format(vendaMarcada.getVendaData()));
                    horaAbertura.setText(formatarHora.format(vendaMarcada.getVendaHora()));
                    labNRFiscal.setText(String.valueOf(vendaMarcada.getNrNota()));
                } else {
                    labNomeCliente.setText(vendaMarcada.getClienteCod().getClienteNome());
                    dataAbertura.setText(formatarData.format(vendaMarcada.getVendaData()));
                    horaAbertura.setText(formatarHora.format(vendaMarcada.getVendaHora()));
                    lisProduto.addAll(vendaMarcada.getListaVenda());
                    labNRFiscal.setText(String.valueOf(vendaMarcada.getNrNota()));
                    atualizaTabela(lisProduto);
                    ControleRecebimento contRec = new ControleRecebimento();
                    double x = 0.0;
                    x = contRec.buscaConta(vendaMarcada.getVendaCod());
                    if (x != 0.0) {
                        labValorTotalVenda.setText(doubleString(vendaMarcada.getVendaTotal() - x));
                    } else {
                        labValorTotalVenda.setText(doubleString(vendaMarcada.getVendaTotal()));
                    }
                }
            } else {

                if (vendaMarcada.getListaVenda().isEmpty()) {

                    labValorTotalVenda.setText(doubleString(0.00));
                    labNomeCliente.setText(vendaMarcada.getClienteCod().getClienteNome());
                    dataAbertura.setText(formatarData.format(vendaMarcada.getVendaData()));
                    horaAbertura.setText(formatarData.format(vendaMarcada.getVendaHora()));
                    labNRFiscal.setText(String.valueOf(vendaMarcada.getNrNota()));
                    ControleRecebimento contRec = new ControleRecebimento();
                    double x = 0.0;
                    x = contRec.buscaConta(vendaMarcada.getVendaCod());

                    if (x != 0.0) {
                        labValorTotalVenda.setText(doubleString(vendaMarcada.getVendaTotal() - x));
                    } else {
                        labValorTotalVenda.setText(doubleString(vendaMarcada.getVendaTotal()));
                    }
                    vendaMarcada.setListaVenda(lisProduto);

                    vendaMarcada.setVendaTotal(VerificaValor());
                    ControleVenda contV = new ControleVenda();
                    contV.salvarAlteracao(vendaMarcada);
                } else {
                    labNomeCliente.setText(vendaMarcada.getClienteCod().getClienteNome());
                    dataAbertura.setText(formatarData.format(vendaMarcada.getVendaData()));
                    horaAbertura.setText(formatarData.format(vendaMarcada.getVendaHora()));
                    lisProduto.addAll(vendaMarcada.getListaVenda());
                    labNRFiscal.setText(String.valueOf(vendaMarcada.getNrNota()));

                    atualizaTabela(lisProduto);
                    String valor = labValorTotalVenda.getText();
                    String comVirgula = valor.replace(',', '.');
                    double valorLAb = 0.0;
                    valorLAb = Double.parseDouble(comVirgula);
                    double ValorMarcandoComProdutosNaLista = valorLAb + vendaMarcada.getVendaTotal();

                    ControleRecebimento contRec = new ControleRecebimento();
                    double x = 0.0;
                    x = contRec.buscaConta(vendaMarcada.getVendaCod());

                    if (x != 0.0) {
                        labValorTotalVenda.setText(doubleString(ValorMarcandoComProdutosNaLista - x));
                    } else {
                        labValorTotalVenda.setText(doubleString(ValorMarcandoComProdutosNaLista));
                    }
                    vendaMarcada.setListaVenda(lisProduto);
                    vendaMarcada.setVendaTotal(VerificaValor());
                    ControleVenda contV = new ControleVenda();
                    contV.salvarAlteracao(vendaMarcada);
                }
            }
            int valorBox = boxContaAberta.getSelectedIndex();
            boxContaAberta.setSelectedIndex(boxContaAberta.getSelectedIndex());
            boxContaAberta.setModel(new DefaultComboBoxModel<Venda>());
            carregarbox();
            boxContaAberta.setSelectedIndex(valorBox);
            labValorTotalVenda.setText(doubleString(vendaMarcada.getVendaTotal()));

        } else {
            lisProduto.clear();
            atualizaTabela(lisProduto);
            labValorTotalVenda.setText("0,00");
            txtCodigoProduto.setText("");
            labNRFiscal.setText("");
            prod = null;
            vendaMarcada = null;
            labNomeCliente.setText("");
            labNomeProduto.setText("");
            labQuantEstoque.setText("");
            labValorProduto.setText("");
            dataAbertura.setText("");
            horaAbertura.setText("");
            venda = new Venda();
            dataVenda = new Date();
        }

    }//GEN-LAST:event_boxContaAbertaActionPerformed

    private void txtCodigoProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodigoProdutoActionPerformed

        // TODO add your handling code here:
    }//GEN-LAST:event_txtCodigoProdutoActionPerformed

    private void txtCodigoProdutoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodigoProdutoKeyPressed

        if (evt.getKeyCode() == evt.VK_ENTER) {
            jSpinQuantProduto.requestFocus();
        }

    }//GEN-LAST:event_txtCodigoProdutoKeyPressed

    private void txtCodigoProdutoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodigoProdutoKeyTyped

        //   jSpinQuantProduto.requestFocus();
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCodigoProdutoKeyTyped

    private void txtCodigoProdutoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodigoProdutoKeyReleased

        // TODO add your handling code here:
    }//GEN-LAST:event_txtCodigoProdutoKeyReleased

    private void txtCodigoProdutoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodigoProdutoFocusLost

        if (!txtCodigoProduto.getText().equals("")) {
            int x = Integer.parseInt(txtCodigoProduto.getText());
            if (x > 0) {
                prod = null;
                ControleProduto contProd = new ControleProduto();
                prod = contProd.buscaCod(x);

                if (prod != null) {
                    if (prod.getProdutoQuantidade() > 0) {
                        labNomeProduto.setText(prod.getProdutoNome());
                        labQuantEstoque.setText(String.valueOf(prod.getProdutoQuantidade()));
                        labValorProduto.setText(doubleString(prod.getProdutoValorVenda()));
                    } else {
                        JOptionPane.showMessageDialog(null, "PRODUTO COM ESTOQUE EM FALTA!");
                        txtCodigoProduto.setText("");
                        txtCodigoProduto.requestFocus();
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "PRODUTO COM O CODIGO NÃO ENCONTRADO!");
                    txtCodigoProduto.setText("");
                    txtCodigoProduto.requestFocus();
                }

            } else {
                JOptionPane.showMessageDialog(null, "CODIGO INEXISTENTE!");

                txtCodigoProduto.setText("");
                txtCodigoProduto.requestFocus();
            }
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_txtCodigoProdutoFocusLost

    private void txtCodigoProdutoMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtCodigoProdutoMouseEntered

        // TODO add your handling code here:
    }//GEN-LAST:event_txtCodigoProdutoMouseEntered

    private void txtCodigoProdutoMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtCodigoProdutoMouseExited

        //  jSpinQuantProduto.requestFocus();
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCodigoProdutoMouseExited

    private void txtCodigoProdutoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtCodigoProdutoMousePressed

        // TODO add your handling code here:
    }//GEN-LAST:event_txtCodigoProdutoMousePressed

    private void txtCodigoProdutoMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtCodigoProdutoMouseReleased

        //jSpinQuantProduto.requestFocus();
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCodigoProdutoMouseReleased

    private void txtCodigoProdutoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtCodigoProdutoMouseClicked

        //  jSpinQuantProduto.requestFocus();
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCodigoProdutoMouseClicked

    private void boxContaAbertaMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_boxContaAbertaMouseExited

        // TODO add your handling code here:
    }//GEN-LAST:event_boxContaAbertaMouseExited

    private void boxContaAbertaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_boxContaAbertaMouseClicked

        // TODO add your handling code here:
    }//GEN-LAST:event_boxContaAbertaMouseClicked

    private void boxContaAbertaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_boxContaAbertaKeyPressed

        // TODO add your handling code here:
    }//GEN-LAST:event_boxContaAbertaKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Vendas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Vendas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Vendas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Vendas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Vendas dialog = new Vendas(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botAdicionar;
    private javax.swing.JButton botBuscarCliente;
    private javax.swing.JButton botBuscarProduto;
    private javax.swing.JButton botExcluir;
    private javax.swing.JButton botFecharNormal;
    private javax.swing.JButton botReceber;
    private javax.swing.JButton botVoltar;
    private javax.swing.JComboBox<Venda> boxContaAberta;
    private javax.swing.JLabel dataAbertura;
    private javax.swing.JLabel horaAbertura;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane3;
    private com.toedter.components.JSpinField jSpinQuantProduto;
    private javax.swing.JLabel labNRFiscal;
    private javax.swing.JLabel labNomeCliente;
    private javax.swing.JLabel labNomeProduto;
    private javax.swing.JLabel labQuantEstoque;
    private javax.swing.JLabel labValorProduto;
    private javax.swing.JLabel labValorTotalVenda;
    private javax.swing.JPanel painelItemCompra;
    private rspanelgradiente.RSPanelGradiente rSPanelGradiente1;
    private rspanelgradiente.RSPanelGradiente rSPanelGradiente2;
    private rojerusan.RSTableMetro tabProdutoVenda;
    private javax.swing.JTextField txtCodigoProduto;
    // End of variables declaration//GEN-END:variables

    private void atualizaTabela(ArrayList<ItemVenda> listProduto) {

        itemVenda.setNumRows(0);
        for (ItemVenda i : listProduto) {
            double x = i.getValor() * i.getQuantidade();
            String v = doubleString(x);
            itemVenda.addRow(new Object[]{i.getProdutoCod().getProdutoNome(), doubleString(i.getValor()), i.getQuantidade(), v});
        }
    }

    private double VerificaValor() {
        double total = 0;
        for (ItemVenda iv : lisProduto) {
            total = total + iv.getQuantidade() * iv.getValor();
        }
        return total;
    }

    public String doubleString(double d) {
        Locale.setDefault(new Locale("pt", "BR"));
        DecimalFormat df = new DecimalFormat("#,##0.00", new DecimalFormatSymbols(new Locale("pt", "BR")));
        String s = df.format(d);
        return s;
    }

    public void darTamanhoAColuna() {
        tabProdutoVenda.getColumnModel().getColumn(0).setPreferredWidth(450);
        tabProdutoVenda.getColumnModel().getColumn(1).setPreferredWidth(15);
        tabProdutoVenda.getColumnModel().getColumn(2).setPreferredWidth(15);
        tabProdutoVenda.getColumnModel().getColumn(3).setPreferredWidth(10);
        //  seuScrollPane.setBorder(BorderFactory.createBevelBorder(0));
    }

    public int contarQuantProdutoNaLista(ArrayList<ItemVenda> lista) {
        int cont = 0;
        for (ItemVenda iv : lista) {
            if (iv.getProdutoCod().getProdutoId() == prod.getProdutoId()) {
                cont = cont + iv.getQuantidade();
            }
        }
        return cont;
    }
}
